package designPattern.factory.factorymethod;

/**
 * @program: type_
 * @description: 工厂方法模式： 每个对象都有一个与之对应的工厂（也是一对多），最常用
 * 既然每个对象都有一个工厂，那为什么还需要工厂呢？直接在test里面new具体图形不久行了？1.因为这体现了开闭原则，新的图形加入不需要更改原来代码
 * 2.可能有的时候new一个具体的类很复杂，比如需要连接数据库，读取配置信息等，我们可以把这些操作放在factory中，test方法只管用
 * 角色：抽象产品，具体产品，抽象工厂，具体工厂
 * 使用场景：1.一个类不知道它所需要的对象的类  2.将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类
 * 创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中
 * @author: xjh
 * @create: 2020-04-18 17:01
 **/
public interface Factory {
    public Shape getShape();
}
